#+TITLE: R Data Structures
#+AUTHOR: Matloff / Birkenkrahe
#+SUBTITLE: DSC 101
#+OPTIONS: toc:nil num:nil
#+startup: hideblocks
#+reveal_theme: black
#+reveal_init_options: transition:'cube'
* What will you learn?

  * Preview of important data structures
  * Vectors and scalars
  * Character strings
  * Matrices
  * Lists
  * Data Frames
  * Classes
  * Extended example

* Overview

  #+attr_html: :width 600px
  [[./img/datastructures.png]]

* Vectors and scalars
** Vectors

   * Storage modes: check ~?mode~
   * Functions: ~mode~, ~storage.mode~, ~typeof~
   * E.g. ~numeric~ (~double~ or ~integer~)
   * Create a numeric vector of three elements!

   #+begin_src R :session :results output
     x <- c(1,2,3)  # integer
     y <- rnorm(3)  # double
     z <- 1:3       # integer

     ## print all three
     x; y; z

     ## check mode
     mode(x)
     storage.mode(x)
     typeof(x)

     ## check mode
     mode(y)
     storage.mode(y)
     typeof(y)

     ## check mode
     mode(z)
     storage.mode(z)
     typeof(z)

   #+end_src

   #+RESULTS:
   #+begin_example
   [1] 1 2 3
   [1] 0.04861205 0.46457487 2.03646610
   [1] 1 2 3
   [1] "numeric"
   [1] "double"
   [1] "double"
   [1] "numeric"
   [1] "double"
   [1] "double"
   [1] "numeric"
   [1] "integer"
   [1] "integer"
   #+end_example

** Scalars

   * There are no scalars (numbers)
   * Scalars are one-element vectors
   * How could you show that?

   #+begin_src R :session :results output
     s <- 1
     s # prints vector of length 1

     ## change rownumber display
     Nile[1:17]
     options(width=100)
     Nile[1:17]
   #+end_src

   #+RESULTS:
   : [1] 1
   :  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020  960 1180
   :  [1] 1120 1160  963 1210 1160 1160  813 1230 1370 1140  995  935 1110  994 1020  960 1180

* Character strings

  * Single-element vectors of mode ~character~
  * Assign ~x <- letters[1:3]~ and print ~x~
  * Check the mode of ~x~

  #+begin_src R :session :results output
    x <- letters[1:3]
    x
    mode(x)
  #+end_src

  #+RESULTS:
  : [1] "a" "b" "c"
  : [1] "character"

** String manipulation

   * Create one numeric, two character vectors
   * Concatenate character vectors with ~paste~
   * Split character vector with ~strsplit~

   #+begin_src R :session :results output
     ## define vectors
     x <- c(5,12,13)  # create numeric vector
     x                # print x
     length(x)        # print length of x
     mode(x)          # print mode of x

     y <- "abc"       # create character string
     y
     length(y)
     mode(y)

     z <- c("abc", "29 88")
     z
     length(z)
     mode(z)

     ## concatenate character strings
     u <- paste("abc","de","f")
     u
     length(u)

     ## split string according to blanks
     v <- strsplit(u, " ")
     v   # notice that v is a list with one vector as element
     length(v)      # list length
     length(v[[1]]) # vector element length
   #+end_src

   #+RESULTS:
   #+begin_example
   [1]  5 12 13
   [1] 3
   [1] "numeric"
   [1] "abc"
   [1] 1
   [1] "character"
   [1] "abc"   "29 88"
   [1] 2
   [1] "character"
   [1] "abc de f"
   [1] 1
   [[1]]
   [1] "abc" "de"  "f"
   [1] 1
   [1] 3
   #+end_example

* Conversion vs. coercion

  * ~character~ conversion: ~as.character~
  * ~numeric~ conversion: ~as.numeric~
  * Change numeric vector to character
  * Change character vector to numeric

  #+begin_src R :session :results output
    y # three real numbers
    yc <- as.character(y)
    yc
    mode(yc)

    x # three letters
    xn <- as.numeric(x)
    xn
    mode(xn)
  #+end_src

  #+RESULTS:
  : [1] "abc"
  : [1] "abc"
  : [1] "character"
  : [1]  5 12 13
  : [1]  5 12 13
  : [1] "numeric"

* Matrices

  * A matrix is a rectangular array of numbers
  * Matrices are vectors with rows and column attributes

** Create matrices with ~matrix~

   * ~matrix~ creates a matrix from input values

   #+begin_src R :session :results output
     A <- matrix()  # an empty 1 x 1 matrix
     A
     dim(A) # rows x columns

     B <- matrix(NA) # an empty 1 x 1 matrix
     B

     C <- matrix(c(1,2)) # a 2 x 1 matrix
     C
     is.matrix(C)   # check if it's a matrix
   #+end_src

   #+RESULTS:
   :      [,1]
   : [1,]   NA
   : [1] 1 1
   :      [,1]
   : [1,]   NA
   :      [,1]
   : [1,]    1
   : [2,]    2
   : [1] TRUE

** Attaching rows and columns

   * ~rbind~ attaches rows
   * ~cbind~ attaches columns

     #+begin_src R :session :results output
       D <- rbind(c(1,4),c(2,2))
       D

       E <- cbind(c(1,4),c(2,2))
       E
     #+end_src

     #+RESULTS:
     :      [,1] [,2]
     : [1,]    1    4
     : [2,]    2    2
     :      [,1] [,2]
     : [1,]    1    2
     : [2,]    4    2

** Matrix algebra

   * Matrices are multiplied with ~%*%~

   #+begin_src R :session :results output
     D %*% c(1,1)
     E %*% c(1,1)
     D %*% E
   #+end_src

   #+RESULTS:
   :      [,1]
   : [1,]    5
   : [2,]    4
   :      [,1]
   : [1,]    3
   : [2,]    6
   :      [,1] [,2]
   : [1,]   17   10
   : [2,]   10    8

** Matrix indexing

   * Matrices are indexed with two subscripts

   #+begin_src R :session :results output
     D
     D[1,2]  # row 1, col 2
     D[,2]   # col 2
     D[2,2]  # row 2, col 2
     D[1,]   # row 1
   #+end_src

   #+RESULTS:
   :      [,1] [,2]
   : [1,]    1    4
   : [2,]    2    2
   : [1] 4
   : [1] 4 2
   : [1] 2
   : [1] 1 4

* Lists

  * Lists can contain different data types
  * This is like a ~struct~ in C/C++
  * Access elements with two-part names

  #+begin_src R :session :results output
    x <- list(u=2, v="abc") # number and string as list
    x
    mode(x)

    x$u # access list element u
    x$v # access list element v

    y <- paste(x$u,x$v)  # concatenation leads to coercion
    y
    mode(y)
    length(y)
  #+end_src

  #+RESULTS:
  #+begin_example
  $u
  [1] 2

  $v
  [1] "abc"
  [1] "list"
  [1] 2
  [1] "abc"
  [1] "2 abc"
  [1] "character"
  [1] 1
  #+end_example

** Use of lists

   * Combine multiple values
   * Return list by function

   #+begin_src R :session :results output
     hist(Nile)       # produces graph
     hn <- hist(Nile) # save histogram as list
     mode(hn)         # mode of hn
     print(hn)        # print hn (we can also just type hn
   #+end_src

   #+RESULTS:
   #+begin_example
   [1] "list"
   $breaks
    [1]  400  500  600  700  800  900 1000 1100 1200 1300 1400

   $counts
    [1]  1  0  5 20 25 19 12 11  6  1

   $density
    [1] 0.0001 0.0000 0.0005 0.0020 0.0025 0.0019 0.0012 0.0011 0.0006 0.0001

   $mids
    [1]  450  550  650  750  850  950 1050 1150 1250 1350

   $xname
   [1] "Nile"

   $equidist
   [1] TRUE

   attr(,"class")
   [1] "histogram"
   #+end_example

   * More common way to show structure with ~str~

     #+begin_src R :session :results output
       str(hn)
     #+end_src

     #+RESULTS:
     : List of 6
     :  $ breaks  : int [1:11] 400 500 600 700 800 900 1000 1100 1200 1300 ...
     :  $ counts  : int [1:10] 1 0 5 20 25 19 12 11 6 1
     :  $ density : num [1:10] 0.0001 0 0.0005 0.002 0.0025 0.0019 0.0012 0.0011 0.0006 0.0001
     :  $ mids    : num [1:10] 450 550 650 750 850 950 1050 1150 1250 1350
     :  $ xname   : chr "Nile"
     :  $ equidist: logi TRUE
     :  - attr(*, "class")= chr "histogram"

* Data frames

  * Data frames are lists made of vectors
  * Vectors can have different modes
  * Data frames are rectangular but not matrices

** Create data frame

   * Turn a list into a data frame using ~data.frame~

   #+begin_src R :session :results output

     fam <- list(kids=c("Jack","Jill"), ages=c(12,10))
     fam
     d <- data.frame(fam)
     d

   #+end_src

   #+RESULTS:
   : $kids
   : [1] "Jack" "Jill"
   :
   : $ages
   : [1] 12 10
   :   kids ages
   : 1 Jack   12
   : 2 Jill   10

   * Turn vectors directly into a data frame

     #+begin_src R :session :results output

       df <- data.frame(kids=c("Jack","Jill"),ages=c(12,10))
       df

     #+end_src

     #+RESULTS:
     :   kids ages
     : 1 Jack   12
     : 2 Jill   10

** Read data frame from file

   * Use ~read.table~ or ~read.csv~
   * You can read in straight from the web

   #+begin_src R :session :results output
     ## read csv without header information
     pima_raw <-
       read.csv(file=
                  "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv",
                header=FALSE, sep=,)
     head(pima_raw)
   #+end_src

   #+RESULTS:
   :   V1  V2 V3 V4  V5   V6    V7 V8 V9
   : 1  6 148 72 35   0 33.6 0.627 50  1
   : 2  1  85 66 29   0 26.6 0.351 31  0
   : 3  8 183 64  0   0 23.3 0.672 32  1
   : 4  1  89 66 23  94 28.1 0.167 21  0
   : 5  0 137 40 35 168 43.1 2.288 33  1
   : 6  5 116 74  0   0 25.6 0.201 30  0

   * [[https://www.kaggle.com/uciml/pima-indians-diabetes-database/version/1][Download from Kaggle]] and read in from local machine

   #+begin_src R :session :results output
     ## read csv with header information
     pima <- read.csv(file="/home/marcus/GitHub/dsc101/5_datastructures/data/diabetes.csv",
                      header=TRUE,
                      sep=,)
     str(pima)
   #+end_src

   #+RESULTS:
   #+begin_example
   'data.frame':        768 obs. of  9 variables:
    $ Pregnancies             : int  6 1 8 1 0 5 3 10 2 8 ...
    $ Glucose                 : int  148 85 183 89 137 116 78 115 197 125 ...
    $ BloodPressure           : int  72 66 64 66 40 74 50 0 70 96 ...
    $ SkinThickness           : int  35 29 0 23 35 0 32 0 45 0 ...
    $ Insulin                 : int  0 0 0 94 168 0 88 0 543 0 ...
    $ BMI                     : num  33.6 26.6 23.3 28.1 43.1 25.6 31 35.3 30.5 0 ...
    $ DiabetesPedigreeFunction: num  0.627 0.351 0.672 0.167 2.288 ...
    $ Age                     : int  50 31 32 21 33 30 26 29 53 54 ...
    $ Outcome                 : int  1 0 1 0 1 0 1 0 1 1 ...
   #+end_example

* Classes

  * R objects[fn:2] are instances of /classes/
  * Classes are /abstract/ data types[fn:1]
  * Class instances are R lists with a class name

** Class example: time series

   * The class of ~Nile~ is time series or ~ts~

   #+begin_src R :session :results output
     str(Nile)
     class(Nile)
   #+end_src

   #+RESULTS:
   :  Time-Series [1:100] from 1871 to 1970: 1120 1160 963 1210 1160 1160 813 1230 1370 1140 ...
   : [1] "ts"

** Class example: histogram

   * Non-graphical output of ~hist()~ has a class
   * Compare also with ~print(hn)~

   #+begin_src R :session :results output
     hn <- hist(Nile)  # create a histogram object hn
     mode(hn)          # the object is of mode "list'
     class(hn)         # its object class is "histogram"
   #+end_src

   #+RESULTS:
   : [1] "list"
   : [1] "histogram"

** What are classes good for?

   * Classes are used by /generic/ functions ([[chambers][Chambers, 2002]])
   * Generic = defines family of similar functions
   * Each function fits a specific class
   * This relates to R's package extensibility

** Generic function example: ~summary()~

   * Invoking ~summary()~ searches according to class, e.g.
     - Calling ~summary()~ on the output of ~hist()~
     - Calling ~summary()~ on the output of ~lm()~ (regression)

   #+begin_src R :session :results output
     summary(hn) # summarize histogram of Nile data set
     summary(Nile) # summarize time series of Nile data set
     summary(lm(1:100~Nile)) # summarize linear fit of Nile data set
   #+end_src

   #+RESULTS:
   #+begin_example
	    Length Class  Mode     
   breaks   11     -none- numeric  
   counts   10     -none- numeric  
   density  10     -none- numeric  
   mids     10     -none- numeric  
   xname     1     -none- character
   equidist  1     -none- logical
      Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
     456.0   798.5   893.5   919.4  1032.5  1370.0

   Call:
   lm(formula = 1:100 ~ Nile)

   Residuals:
       Min      1Q  Median      3Q     Max 
   -51.984 -22.428  -2.128  18.508  63.495 

   Coefficients:
		Estimate Std. Error t value Pr(>|t|)    
   (Intercept) 123.83948   14.32659   8.644 1.05e-13 ***
   Nile         -0.07977    0.01533  -5.204 1.07e-06 ***
   ---
   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

   Residual standard error: 25.81 on 98 degrees of freedom
   Multiple R-squared:  0.2165,	Adjusted R-squared:  0.2085 
   F-statistic: 27.08 on 1 and 98 DF,  p-value: 1.072e-06
   #+end_example

** Generic function example: ~plot()~
   * You can call ~plot()~ on just about any R object, e.g.
     - Call ~plot()~ on a time series like ~Nile~
     - Call ~plot()~ on a data frame like ~mtcars~

   #+begin_src R :session :results output 
     plot(Nile) # plot of Nile time series data
   #+end_src

   #+RESULTS:

   #+begin_src R :session :results output 
     plot(hn)  # plot histogram
   #+end_src

   #+RESULTS:

   #+begin_src R :session :results output 
     plot(mtcars) # plot of all mtcars variables
   #+end_src

   #+RESULTS:

* Extended example: regression analysis

  [[./img/mtcars_lm.png]]

** Objective

   We walk through a brief statistical regression analysis - fitting a
   linear function to a small data set, showing different R objects
   along the way.

** Data set
   The file ~grades.txt~ contains grades. The numbers correspond to
   letter grades on a 5-point scale common in Continental Europe:

   | LETTER | POINT |
   |--------+-------|
   | A+     |   0.7 |
   | A      |   1.0 |
   | A-     |   1.3 |
   |--------+-------|
   | B+     |   1.7 |
   | B      |   2.0 |
   | B-     |   2.3 |
   |--------+-------|
   | C+     |   2.7 |
   | C      |   3.0 |
   | C-     |   3.3 |
   |--------+-------|
   | D+     |   3.7 |
   | D      |   4.0 |
   | D-     |   4.3 |
   |--------+-------|
   | F      |   5.0 |
   |--------+-------|

** Column vectors

   Each row contains the data for one student consisting of the midterm
   examination grade, the final examination grade, and the average quiz
   grade.

   We want to see how well the midterm and quiz grades predict the
   student's final exam grade.

   We'll come back to this example when we go deeper into
   visualization and data interpretation.

** Read data into R

   * Make sure you are in the right folder
   * Read in data file using ~read.table()~
   * Don't read the first row as ~header~ (default)

   #+begin_src R :session :results output
     setwd("/home/marcus/GitHub/dsc101/5_datastructures")
     grades <- read.table(file="./data/grades.txt", header=FALSE)
   #+end_src

   #+RESULTS:

   * Take a look at the data with ~head()~
   * R assigns default column vector names

   #+begin_src R :session :results output
     head(grades)
   #+end_src

   #+RESULTS:
   :    V1  V2 V3
   : 1 3.0 1.0  1
   : 2 2.7 2.3  1
   : 3 3.7 1.7  1
   : 4 1.7 1.7  1
   : 5 5.0 1.7  1
   : 6 2.0 1.3  1

** Check R data

   * ~grades~ is an R object of class ~data.frame~
   * ~str()~ also contains this information (and more)

   #+begin_src R :session :results output
     class(grades)
     str(grades)
   #+end_src

   #+RESULTS:
   : [1] "data.frame"
   : 'data.frame':      34 obs. of  3 variables:
   :  $ V1: num  3 2.7 3.7 1.7 5 2 3.7 4 1.7 5 ...
   :  $ V2: num  1 2.3 1.7 1.7 1.7 1.3 1.7 1.3 1.7 1.7 ...
   :  $ V3: num  1 1 1 1 1 1 1.3 1 1 1 ...

** Model data

   * Predict finals score (~V2~) from midterm scores (~V1~)

     #+begin_src R :session :results output
       lma <- lm(grades[,2] ~ grades[,1]) # using indices
     #+end_src

     #+RESULTS:

   * The ~lm()~ function fits a linear prediction equation: predicted
     final = b_0 + b_1 * midterm, where b_0 and b_1 are constant
     estimated from the data

   * Check out ~help(lm)~ and ~example(lm)~ for details

    How could we also have extracted the column vectors?

** Extracting column vectors with ~$~

   The accessor operator ~$~ works only for named non-atomic vectors

    #+begin_src R :session :results output
      lma <- lm(grades$V2 ~ grades$V1) # using accessor $
    #+end_src

    #+RESULTS:

** Explore the ~lm~ object

   * The fit returned by ~lm()~ is in an object
   * The object is stored in the variable ~lma~
   * ~lma~ is an instance of the class ~lm~

   #+begin_src R :session :results output
     class(lma)
   #+end_src

   #+RESULTS:
   : [1] "lm"

** List components of the object with ~attributes()~

    #+begin_src R :session :results output
      attributes(lma)
    #+end_src

    #+RESULTS:
    : $names
    :  [1] "coefficients"  "residuals"     "effects"       "rank"          "fitted.values" "assign"
    :  [7] "qr"            "df.residual"   "xlevels"       "call"          "terms"         "model"
    :
    : $class
    : [1] "lm"

** More details with ~str()~

   #+begin_src R :session :results output
     str(lma)
   #+end_src

   #+RESULTS:
   #+begin_example
   List of 12
    $ coefficients : Named num [1:2] 1.13 0.17
     ..- attr(*, "names")= chr [1:2] "(Intercept)" "grades$V1"
    $ residuals    : Named num [1:34] -0.64 0.711 -0.059 0.282 -0.281 ...
     ..- attr(*, "names")= chr [1:34] "1" "2" "3" "4" ...
    $ effects      : Named num [1:34] -8.9351 -1.3973 -0.0835 0.4484 -0.4293 ...
     ..- attr(*, "names")= chr [1:34] "(Intercept)" "grades$V1" "" "" ...
    $ rank         : int 2
    $ fitted.values: Named num [1:34] 1.64 1.59 1.76 1.42 1.98 ...
     ..- attr(*, "names")= chr [1:34] "1" "2" "3" "4" ...
    $ assign       : int [1:2] 0 1
    $ qr           :List of 5
     ..$ qr   : num [1:34, 1:2] -5.831 0.171 0.171 0.171 0.171 ...
     .. ..- attr(*, "dimnames")=List of 2
     .. .. ..$ : chr [1:34] "1" "2" "3" "4" ...
     .. .. ..$ : chr [1:2] "(Intercept)" "grades$V1"
     .. ..- attr(*, "assign")= int [1:2] 0 1
     ..$ qraux: num [1:2] 1.17 1.03
     ..$ pivot: int [1:2] 1 2
     ..$ tol  : num 1e-07
     ..$ rank : int 2
     ..- attr(*, "class")= chr "qr"
    $ df.residual  : int 32
    $ xlevels      : Named list()
    $ call         : language lm(formula = grades$V2 ~ grades$V1)
    $ terms        :Classes 'terms', 'formula'  language grades$V2 ~ grades$V1
     .. ..- attr(*, "variables")= language list(grades$V2, grades$V1)
     .. ..- attr(*, "factors")= int [1:2, 1] 0 1
     .. .. ..- attr(*, "dimnames")=List of 2
     .. .. .. ..$ : chr [1:2] "grades$V2" "grades$V1"
     .. .. .. ..$ : chr "grades$V1"
     .. ..- attr(*, "term.labels")= chr "grades$V1"
     .. ..- attr(*, "order")= int 1
     .. ..- attr(*, "intercept")= int 1
     .. ..- attr(*, "response")= int 1
     .. ..- attr(*, ".Environment")=<environment: R_

     .. ..- attr(*, "predvars")= language list(grades$V2, grades$V1)
     .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "numeric"
     .. .. ..- attr(*, "names")= chr [1:2] "grades$V2" "grades$V1"
    $ model        :'data.frame':       34 obs. of  2 variables:
     ..$ grades$V2: num [1:34] 1 2.3 1.7 1.7 1.7 1.3 1.7 1.3 1.7 1.7 ...
     ..$ grades$V1: num [1:34] 3 2.7 3.7 1.7 5 2 3.7 4 1.7 5 ...
     ..- attr(*, "terms")=Classes 'terms', 'formula'  language grades$V2 ~ grades$V1
     .. .. ..- attr(*, "variables")= language list(grades$V2, grades$V1)
     .. .. ..- attr(*, "factors")= int [1:2, 1] 0 1
     .. .. .. ..- attr(*, "dimnames")=List of 2
     .. .. .. .. ..$ : chr [1:2] "grades$V2" "grades$V1"
     .. .. .. .. ..$ : chr "grades$V1"
     .. .. ..- attr(*, "term.labels")= chr "grades$V1"
     .. .. ..- attr(*, "order")= int 1
     .. .. ..- attr(*, "intercept")= int 1
     .. .. ..- attr(*, "response")= int 1
     .. .. ..- attr(*, ".Environment")=<environment: R_

     .. .. ..- attr(*, "predvars")= language list(grades$V2, grades$V1)
     .. .. ..- attr(*, "dataClasses")= Named chr [1:2] "numeric" "numeric"
     .. .. .. ..- attr(*, "names")= chr [1:2] "grades$V2" "grades$V1"
    - attr(*, "class")= chr "lm"
   #+end_example

** Objects store attributes

    * Estimated linear coefficients are stored in ~lma$coefficients~
    * Long names can be shortened (if they're not ambiguous)

    #+begin_src R :session :results output
      lma$coef
    #+end_src

    #+RESULTS:
    : (Intercept)   grades$V1
    :   1.1281758   0.1704965

** Generic function ~coef~

    There is a generic function, ~coef~, just for this, too

    #+begin_src R :session :results output
      coef(lma)
    #+end_src

    #+RESULTS:
    : (Intercept)   grades$V1
    :   1.1281758   0.1704965

** Using generic ~print()~

    You can also print the object ~lma~ itself

    #+begin_src R :session :results output
      lma
    #+end_src

    #+RESULTS:
    :
    : Call:
    : lm(formula = grades$V2 ~ grades$V1)
    :
    : Coefficients:
    : (Intercept)    grades$V1
    :      1.1282       0.1705

    * By default, this is the generic ~print()~ function
    * ~print()~ hands the work over to ~print.lm()~

** Classes contain ~methods()~

    * See all methods of ~print()~ with ~methods()~

    #+begin_src R :session :results output
      methods("print")
    #+end_src

    #+RESULTS:
    #+begin_example
      [1] print.acf*
      [2] print.anova*
      [3] print.aov*
      [4] print.aovlist*
      [5] print.ar*
      [6] print.Arima*
      [7] print.arima0*
      [8] print.AsIs
      [9] print.aspell*
     [10] print.aspell_inspect_context*
     [11] print.bibentry*
     [12] print.Bibtex*
     [13] print.browseVignettes*
     [14] print.by
     [15] print.changedFiles*
     [16] print.check_bogus_return*
     [17] print.check_code_usage_in_package*
     [18] print.check_compiled_code*
     [19] print.check_demo_index*
     [20] print.check_depdef*
     [21] print.check_details*
     [22] print.check_details_changes*
     [23] print.check_doi_db*
     [24] print.check_dotInternal*
     [25] print.check_make_vars*
     [26] print.check_nonAPI_calls*
     [27] print.check_package_code_assign_to_globalenv*
     [28] print.check_package_code_attach*
     [29] print.check_package_code_data_into_globalenv*
     [30] print.check_package_code_startup_functions*
     [31] print.check_package_code_syntax*
     [32] print.check_package_code_unload_functions*
     [33] print.check_package_compact_datasets*
     [34] print.check_package_CRAN_incoming*
     [35] print.check_package_datalist*
     [36] print.check_package_datasets*
     [37] print.check_package_depends*
     [38] print.check_package_description*
     [39] print.check_package_description_encoding*
     [40] print.check_package_license*
     [41] print.check_packages_in_dir*
     [42] print.check_packages_used*
     [43] print.check_po_files*
     [44] print.check_pragmas*
     [45] print.check_Rd_line_widths*
     [46] print.check_Rd_metadata*
     [47] print.check_Rd_xrefs*
     [48] print.check_RegSym_calls*
     [49] print.check_S3_methods_needing_delayed_registration*
     [50] print.check_so_symbols*
     [51] print.check_T_and_F*
     [52] print.check_url_db*
     [53] print.check_vignette_index*
     [54] print.checkDocFiles*
     [55] print.checkDocStyle*
     [56] print.checkFF*
     [57] print.checkRd*
     [58] print.checkRdContents*
     [59] print.checkReplaceFuns*
     [60] print.checkS3methods*
     [61] print.checkTnF*
     [62] print.checkVignettes*
     [63] print.citation*
     [64] print.codoc*
     [65] print.codocClasses*
     [66] print.codocData*
     [67] print.colorConverter*
     [68] print.compactPDF*
     [69] print.condition
     [70] print.connection
     [71] print.CRAN_package_reverse_dependencies_and_views*
     [72] print.data.frame
     [73] print.Date
     [74] print.default
     [75] print.dendrogram*
     [76] print.density*
     [77] print.difftime
     [78] print.dist*
     [79] print.Dlist
     [80] print.DLLInfo
     [81] print.DLLInfoList
     [82] print.DLLRegisteredRoutines
     [83] print.dummy_coef*
     [84] print.dummy_coef_list*
     [85] print.ecdf*
     [86] print.eigen
     [87] print.factanal*
     [88] print.factor
     [89] print.family*
     [90] print.fileSnapshot*
     [91] print.findLineNumResult*
     [92] print.formula*
     [93] print.ftable*
     [94] print.function
     [95] print.getAnywhere*
     [96] print.glm*
     [97] print.hclust*
     [98] print.help_files_with_topic*
     [99] print.hexmode
    [100] print.HoltWinters*
    [101] print.hsearch*
    [102] print.hsearch_db*
    [103] print.htest*
    [104] print.infl*
    [105] print.integrate*
    [106] print.isoreg*
    [107] print.kmeans*
    [108] print.Latex*
    [109] print.LaTeX*
    [110] print.libraryIQR
    [111] print.listof
    [112] print.lm*
    [113] print.loadings*
    [114] print.loess*
    [115] print.logLik*
    [116] print.ls_str*
    [117] print.medpolish*
    [118] print.MethodsFunction*
    [119] print.mtable*
    [120] print.NativeRoutineList
    [121] print.news_db*
    [122] print.nls*
    [123] print.noquote
    [124] print.numeric_version
    [125] print.object_size*
    [126] print.octmode
    [127] print.packageDescription*
    [128] print.packageInfo
    [129] print.packageIQR*
    [130] print.packageStatus*
    [131] print.pairwise.htest*
    [132] print.person*
    [133] print.POSIXct
    [134] print.POSIXlt
    [135] print.power.htest*
    [136] print.ppr*
    [137] print.prcomp*
    [138] print.princomp*
    [139] print.proc_time
    [140] print.raster*
    [141] print.Rd*
    [142] print.recordedplot*
    [143] print.restart
    [144] print.RGBcolorConverter*
    [145] print.rle
    [146] print.roman*
    [147] print.sessionInfo*
    [148] print.simple.list
    [149] print.smooth.spline*
    [150] print.socket*
    [151] print.srcfile
    [152] print.srcref
    [153] print.stepfun*
    [154] print.stl*
    [155] print.StructTS*
    [156] print.subdir_tests*
    [157] print.summarize_CRAN_check_status*
    [158] print.summary.aov*
    [159] print.summary.aovlist*
    [160] print.summary.ecdf*
    [161] print.summary.glm*
    [162] print.summary.lm*
    [163] print.summary.loess*
    [164] print.summary.manova*
    [165] print.summary.nls*
    [166] print.summary.packageStatus*
    [167] print.summary.ppr*
    [168] print.summary.prcomp*
    [169] print.summary.princomp*
    [170] print.summary.table
    [171] print.summary.warnings
    [172] print.summaryDefault
    [173] print.table
    [174] print.tables_aov*
    [175] print.terms*
    [176] print.ts*
    [177] print.tskernel*
    [178] print.TukeyHSD*
    [179] print.tukeyline*
    [180] print.tukeysmooth*
    [181] print.undoc*
    [182] print.vignette*
    [183] print.warnings
    [184] print.xgettext*
    [185] print.xngettext*
    [186] print.xtabs*
    see '?methods' for accessing help and source code
    #+end_example

** More stats with ~summary()~

    * Get more stats info with ~summary()~
    * It triggers a call to ~summary.lm()~

    #+begin_src R :session :results output
      summary(lma)
    #+end_src

    #+RESULTS:
    #+begin_example

    Call:
    lm(formula = grades$V2 ~ grades$V1)

    Residuals:
         Min       1Q   Median       3Q      Max
    -0.98066 -0.29417 -0.08459  0.26919  2.01934

    Coefficients:
		Estimate Std. Error t value Pr(>|t|)
    (Intercept)  1.12818    0.20142   5.601 3.46e-06 ***
    grades$V1    0.17050    0.07309   2.333   0.0261 *
    ---
    Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

    Residual standard error: 0.599 on 32 degrees of freedom
    Multiple R-squared:  0.1453, Adjusted R-squared:  0.1186
    F-statistic: 5.442 on 1 and 32 DF,  p-value: 0.02611
    #+end_example

** Improving the model

     * We can also estimate from both exam 1 and quiz scores
     * To make it easier, we name the column vectors first

     #+begin_src R :session :results output
       names(grades) <- c("final","midterm", "quiz")
       head(grades)
     #+end_src

     #+RESULTS:
     :   final midterm quiz
     : 1   3.0     1.0    1
     : 2   2.7     2.3    1
     : 3   3.7     1.7    1
     : 4   1.7     1.7    1
     : 5   5.0     1.7    1
     : 6   2.0     1.3    1

*** Add predictors

     * Now we use ~+~ to add another predictor variable

       #+begin_src R :session :results output
	 lmb <- lm(grades$final ~ grades$midterm + grades$quiz)
       #+end_src

       #+RESULTS:

* Concept summary


* Code summary

  | CODE | DESCRIPTION |
  |------+-------------|
  |      |             |

* References

  <<chambers>> Chambers J (2 Jan 2002). The Definition of Generic
  Functions and Methods [Website]. [[https://developer.r-project.org/methodDefinition.html][Online: r-project.org.]]

* Footnotes

[fn:2]Objects in R are "specialized data structures which can be
referred to through symbols or variables". These symbols are
themselves objects and accessible to programs.

[fn:1]These are S3 classes - the S stems from the predecessor to R,
the S language. S and R are object oriented languages - everything is
an object - but R objects are different from C++ or Java objects.
