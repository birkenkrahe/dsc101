#+TITLE: LITERATE PROGRAMMING
#+AUTHOR: Marcus Birkenkrahe
#+STARTUP: showall
#+OPTIONS: toc:nil
* What will you learn?

  * What is the main idea behind the Web?
  * What are Markup and Markdown?
  * What is "literate programming"?
  * What does it have to do with data science notebooks?
  * Which data science notebooks are out there?
  * How can I use notebooks for data science?
  * How can I use notebooks in my own work?

  #+ATTR_HTML: :width 500px
  [[./img/backflip.jpg]]

* It's personal

  * DESY Particle Physics PhD
  * CERN WWW development
  * What is the main idea behind the Web?
  #+ATTR_HTML: :width 500px
  [[./img/desy.png]]

  /Image: glimpse of the early days of the web/

* What is markup?

  * HTML = HyperText Markup Language
  * Hide meta information - unlike "WYSIWIG"
  * Example - active text element behind [[https://www.w3schools.com][This is a link]].

    Right-click and choose ~Inspect~ to see the active element:

    [[./img/html.png]]

  Q: /Who can write HTML (and CSS) documents?/[fn:4]

* What is markdown?

  #+begin_quote

»The idea for Markdown is to make it easy to read, write, and edit
prose. HTML is a publishing format; Markdown is a writing
format. Thus, Markdown’s formatting syntax only addresses issues that
can be conveyed in plain text.« -- [[gruber][John Gruber]]

  #+end_quote

** Why markdown?

   * Easy-to-read and easy-to-write
   * Easy to customize
   * Even easier than HTML:

   [[./img/md.png]]

   /Q: Have you come across Markup or Markdown?/

** What is ~YAML~

   * [[https://en.wikipedia.org/wiki/YAML][YAML]] ("YAML Ain't Markup Language")
   * Used for configuration (e.g. headers)
   * Used in R Markdown Notebooks

   #+ATTR_HTML: :width 500px
   [[./img/yaml.png]]

* What is [[https://orgmode.org/][ORG-MODE]]?

  * Major GNU Emacs editor mode[fn:2]
  * Plain text markup + export + publishing
  * Literate Programming environment[fn:5]

  /Q: Can you think of any reasons to live life in plain text?/

  #+ATTR_HTML: :width 500px
  [[./img/org.png]]

  /Image: this very page in Emacs Org-mode./

* Literate programming

  #+begin_quote
  »Instead of imagining that our main task is to instruct a /computer/
  what to do, let us concentrate rather on explaining to /human beings/
  what we want a computer to do.« -- [[knuth][Donald Knuth]]
  #+end_quote

  #+ATTR_HTML: :width 600px
  [[./img/knuth.jpg]]

** Why literate programming?

   * Machines cannot handle uncertainty
   * Humans like stories

   #+ATTR_HTML: :width 600px
   [[./img/neumann.png]]

** How does literate programming work?

   * Write programs for use by humans /and/ by machines
   * Write mainly documentation that also contains code

   #+ATTR_HTML: :width 500px
   [[./img/scoring.png]]

** Literate programming workflow

   * Documentation + code is contained in one file (~file.w~)
   * Tangling leads to a file that the computer can run
   * Weaving leads to a file that can be printed (~*.dvi~[fn:6])

   #+ATTR_HTML: :width 500px
   [[./img/cweb.png]]

*** Literate programming example: ~adventure~

    * [[https://en.wikipedia.org/wiki/Colossal_Cave_Adventure][~advent~]] is the first digital Role Playing Game (RPG)
    * It was rewritten in ~cweb~ by Don Knuth
    * [[https://quuxplusone.github.io/Advent/][Play it online here!]] (Linux: built-in ~$ advent~)

    #+ATTR_HTML: :width 500px
    [[./img/advent.png]]

    (Source: [[adventure][Adventure, 1976]])

*** Literate programming example: ~adventure~

    Literate program text that corresponds to the instructions above:

    #+ATTR_HTML: :width 500px
    [[./img/adventpgm.png]]

*** Literate programming example: ~adventure~


    * Automatic index of commands, variables, objects
    * Index of subroutines, table of contents
    * Support for digital, code-based storytelling

      /Image: automatic index of ~adventure~/
      #+ATTR_HTML: :width 500px
      [[./img/index.png]]

      /Image: automatic table of contents of ~adventure~/
      #+ATTR_HTML: :width 500px
      [[./img/toc.png]]

* Pros and cons of literate programming

  | *LITPROG PROS*          | *LITPROG *CONS*               |
  |-------------------------+-------------------------------|
  | Storytelling supported  | Requires thought              |
  |-------------------------+-------------------------------|
  | Prettyprinting with TeX[fn:7] | TeX difficult to learn        |
  |-------------------------+-------------------------------|
  | Automatic index/TOC     | Requires (different) training |
  |-------------------------+-------------------------------|
  | Free Software           | Standardisation difficult     |
  |-------------------------+-------------------------------|

* The case for literate programming

  * Code and documentation in separate files and rarely synchronized,
  * Variable names that are mnemonics and acronyms, not words,
  * Documentation that is seldom created by the programmer, and
  * Documentation that has a lower priority than the program.

    See also: "Whither Literate Programming" ([[myers][Myers, 2018]])

  #+begin_quote
  »It is commonly accepted in software engineering circles that one of
  the greatest needs in computing is the reduction of the cost of
  maintenance of codes.  Maintenance programmers spend at least half
  of their time trying to understand what code does and maintenance is
  accepted to be 60% to 80% of a code’s cost.« ([[childs2010][Childs, 2010]])
  #+end_quote

* Modern application examples

  * [[http://www.extremeprogramming.org/][Extreme Programming]] (XP)
  * [[http://agilemodeling.com/][Agile Modeling]] (AM)
  * Interactive programming

  /Image: computational [[http://ipython.org/][IPython]] notebook from 2005 (precursor of
  Jupyter notebooks)/

  #+ATTR_HTML: :width 600px
  [[./img/ipython.png]]

** Agile methodologies

   * Ways to develop and document anything
   * Better suited for /complex/ projects and /culturally/ diverse teams
   * Core value: optimize customer /communication/

   /Image: [[https://www.scrum.org/resources/what-is-scrum/][Scrum]] is the best known agile methodology/

   #+ATTR_HTML: :width 600px
   [[./img/scrum.png]]

** Notebook examples

   * [[https://monty.shinyapps.io/subsetting/#section-introduction][Subsetting quiz as shiny app with ~learnr~ package]]
   * [[https://web.archive.org/web/20161002004240/http://www.desy.de/user/projects/LitProg/Course.html][GNA Internet Course on Literate Programming (1994)]]
   * [[https://docs.deepnote.com/deepnote-crash-course-videos][SQL cells in Deepnote (demo, 1 min)]]
   * [[https://www.kaggle.com/uciml/pima-indians-diabetes-database][Kaggle notebook from Pima Indians database]]
   * [[https://count.co/][Count cloud notebook]]
   * [[https://projects.datacamp.com/projects/41][Introduction to DataCamp projects (with R)]]
   * [[https://rmarkdown.rstudio.com/gallery.html][R Markdown Outputs Gallery]]

** Notebook tutorials

   * Tutorial: [[https://www.datacamp.com/community/blog/jupyter-notebook-r][Jupyter and R Markdown: Notebooks with R]] (2016)
   * Book: [[https://bookdown.org/yihui/rmarkdown/notebook.html][R notebook (bookdown)]]
   * Article: [[https://medium.com/swlh/r-notebook-for-dummies-save-and-share-results-easily-51d343a4882][R notebooks for dummies]] (2020)
   * Course: [[https://learn.datacamp.com/courses/reporting-with-rmarkdown][Reporting with R Markdown]] (2020)
   * Course: [[https://rmarkdown.rstudio.com/index.html][R Markdown from RStudio]]

   /Image: screenshot from the RStudio cloud workspace/
   #+ATTR_HTML: :width 600px
   [[./img/demo.png]]
   
** Org-mode again

   * Notebooks work with R, SQL, Python,...anything
   * [[https://sqlite.org/about.html][SQLite]] example (SQLite = SQL for IoT)
   * Present, too, if you like
   * R notebook example (print+plot)

     -----
   /Image: SQLite notebook example/

   #+ATTR_HTML: :width 600px
   [[./img/sqlite.png]]

* Notebook applications for you

  #+attr_html: :width 600px
  [[./img/batter.gif]]
  
  * Emacs + ESS + Org-mode (see [[https://github.com/birkenkrahe/org/blob/master/FAQ.md#org89c9b03][FAQ]])
  * RStudio R notebooks
  * Write your next homework as a "literate program"[fn:3]

* References

  <<childs>> Bart Childs, "Literate Programming, Why?"
  (n.d.). [[http://www.literateprogramming.com/bchilds1.pdf][literateprogramming.com]]

  <<childs2010>> Bart Childs, "Thirty years of literate
  programming and more?". [[https://www.tug.org/TUGboat/tb31-2/tb98childs.pdf][TUGboat, Volume 31(2), 2010:183-188]].

  <<gruber>> John Gruber, "Markdown:
  Syntax". Blog. [[https://daringfireball.net/projects/markdown/syntax#block][daringfireball.net]]

  <<knuth>> Donald E. Knuth, "Von Neumann's First Computer
  Program". Computing Surveys, 2(4), 1970.

  <<cweb>> Donald E. Knuth and Silvio Levy, "The ~CWEB~ System of
  Structured Documentation", 2002. Manual. [[http://www.literateprogramming.com/cweb.pdf][literateprogramming.com]]

  <<myers>> Bob Myers (2018). Whither Literate Programming
  [blog]. [[https://torazaburo.medium.com/whither-literate-programming-1-f7326fec86e4][Online: medium.com]].

  <<wiki>> Wikipedia (14 Oct 2021). TeX [article]. [[https://en.wikipedia.org/wiki/TeX][Online:
  en.wikipedia.org.]]

  <<adventure>> [[http://www.literateprogramming.com/adventure.pdf][Don Woods and Don Knuth, 1998.]] ([[https://quuxplusone.github.io/Advent/][Play online]])

  <<smith>> Zachary M. Smith, "R Markdown Crash Course",
  2020-03-02. [[https://zsmith27.github.io/rmarkdown_crash-course/index.html][github.com]]

* Footnotes

[fn:7]TeX is a typesetting system designed and written by Donald Knuth
as a literate program. The LaTeX typesetting system, popular in
science and research, is derived from TeX. For more, see Wikipedia
([[wiki][2021]]).

[fn:6]~*.dvi~ files ("device independent") are binary output files of
the TeX typesetting software ([[https://texfaq.org/FAQ-dvi][texfaq]]) 

[fn:5]See also: [[https://orgmode.org/resources/img/features/tables.gif][Org-mode spreadsheets (Gif)]]

[fn:4]For a live view, right click & pick "View page source" in your
browser.

[fn:3] I promise that it'll dazzle your teacher! Remember: litprog
means "documentation first" - this is data-driven storytelling from
the story rather than from the data end - much easier and much more
likely to result in a good story!

[fn:2] A major mode in Emacs is an editing environment that is
customized for a particular purpose - e.g. coding in a specific
language like R, or writing notes, like Org-mode, or presenting, like
Org-present. Most editors don't have this possibility. For GNU Emacs,
all modes are easily extensible, that is users can create their own
customizations and contribute them to the editor - just like packages
in R.

[fn:1] ~Perl~ is a wonderful programming language specialized on
processing text. It is, by the way, a great extension to knowing R and
SQL, and arguably even easier to learn than Python.
