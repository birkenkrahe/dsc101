#+TITLE: ggplot2
#+AUTHOR: Marcus Birkenkrahe
#+DATE: Winter 2020
#+EMAIL: birkenkrahe@hwr-berlin.de
#+STARTUP: folded
#+OPTIONS: toc:nil
#+INFOJS_OPT: :view:info
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./style.css" />
* WHAT WILL YOU LEARN?[fn:1]

  * Quick plots
  * Components of a graph
  * Plot objects and piping
  * Geometries
  * Aesthetic mappings
  * Layers
  * Scales
  * Labels and titles
  * Categories as colors
  * Putting it all together

  #+CAPTION: US Gun Murders in 2010
  #+name: fig:gun
  #+ATTR_HTML: :width 500px
  #+ATTR_ORG: :width 500px
  #+ATTR_LATEX: :width 300px
  [[./img/gun_murders.png]]
  
* GRAPHICS PACKAGES IN R
** Installation
   In this chapter, we first return to the data used in the chapter on
   "Basic plotting with R", and create some simple examples using the
   ~ggplot2~ package. Then we move on to a real data frame.

   Note that there are yet more graphics packages in R, e.g. ~grid~ and
   ~lattice~ ([[kumar][Kumar, 2020]])

   To begin, make sure that you have installed ~ggplot2~:
   #+begin_example
   R> install.packages("ggplot2")
   R> library(ggplot2)
   #+end_example
*** Problems students had in Windows 10
    * Installation of ~dplyr~
      #+begin_quote
      > library(dplyr)
      Error: package or namespace load failed for 'dplyr' in loadNamespace(j <- i1L, c(lib.loc, .libPaths()), versionCheck = vIj):
      there is no package called 'purrr'
      #+end_quote
      [[https://community.powerbi.com/t5/Desktop/R-refresh-not-working-anymore-rlang-loaded-0-2-2-but-0-3-0/m-p/571035#M269586][Solution (community forum)]]
*** Problems students had in MacOS
    * Default locale problem - see screenshot from the introductory
      lesson (installation) in figure [[fig:mac]].
      #+caption: MacOS installation problem and solution
      #+name: fig:mac
      #+attr_html: :width 600px
      [[./img/macos.png]]
** Beyond the Tidyverse
   This lesson builds on [[davies][Davies (2016)]] and [[irizarry][Irizarry (2020)]]. The book by
   Irizarry is available online for free - the chapter on ~ggplot2~
   assumes knowledge of the Tidyverse package ~dplyr~. This package
   contains several useful functions to manipulate data frames. The way
   these functions work will be familiar to those who know SQL:
   * ~filter~ to extract rows/observations from a data frame
   * ~select~ to extract columns/vectors from a data frame
   * ~mutate~ to add column vectors (variables) to a data frame
   -----
   A better performing package for big data in tables is
   [[https://www.datacamp.com/community/tutorials/data-table-r-tutorial][~data.table~]]. You will especially like this package if you
   already know SQL since it follows the same logic.
** Tidyness
   A condition for using both ~ggplot2~ and ~dplyr~ functions is that
   the data are "tidy", which in short means that they are perfectly
   tabular (like data in relational databases) - see [[wickham][Wickham (2014)]]
   for details, and figure [[fig:tidy]] for an illustration:
   1) Each variable is a column
   2) Each observation is a row
   3) Each type of observational unit is a table

      Tidy data are nice if you have someone to tidy the data for
      you, or if they are already in that format. Then you can focus
      on analysis instead of data cleaning. However, there is likely
      to be less room for new discoveries.

      In the Tidyverse, tidy data output is formatted as so-called
      "tibbles", which are rather hard to read. To me, the Tidyverse
      seems rather suited to the intermediate to professional R
      programmer - not the (casual) user or first-time learner of
      R[fn:2].

   #+caption: Tidy data (table). Source: R for Data Science ([[grolemund][Wickham/Grolemund 2016]])
   #+name: fig:tidy
   #+attr_html: :width 600px
   [[./img/tidy.png]]
** What are messy data?
   But how would "non-tidy" (aka messy) data look like? Wickham (2014)
   gives several indications for messy data:
   * Column headers are values, not variable names.
   * Multiple variables are stored in one column.
   * Variables are stored in both rows and columns.
   * Multiple types of observational units are stored in the same
     table.
   * A single observational unit is stored in multiple tables.

   Real data, especially big data, are usually messy, and not tidy. You
   may not know this because for training purposes, mostly tidy tabular
   data are used.
* QUICK PLOTS
** Print coordinate vectors
   #+begin_src R :results output graphics :file ./img/qplot.png
     ## load ggplot2 package
     library(ggplot2)

     ## define coordinate vectors
     foo <- c(1.1,2,3.5,3.9,4.2)
     bar <- c(2,2.2,-1.3,0,0.2)

     ## quick plot foo,bar
     qplot(foo,bar)
   #+end_src

   See figure [[fig:qplot]] for the output of this code. Notice the visual
   changes to the generic plotting function ~plot(foo,bar)~. But the
   syntax is the same: two vectors of equal length are passed to the
   function and evaluated as two coordinate vectors.
   #+caption:
   #+name: fig:qplot
   [[./img/qplot.png]]
** Define plot labels
   Label definition works in the same way:
   #+begin_src R :results output graphics :file ./img/qplot1.png
     ## load ggplot2 package
     library("ggplot2")

     ## define coordinate vectors
     foo <- c(1.1,2,3.5,3.9,4.2)
     bar <- c(2,2.2,-1.3,0,0.2)

     ## quick plot foo,bar with labels
     qplot(foo,bar,
           main="My lovely plot",
           xlab="x axis label",
           ylab="location y")
   #+end_src

   See figure [[fig:qplot1]] for the output of this code.
   #+caption:
   #+name: fig:qplot1
   [[./img/qplot1.png]]
** Difference to ~plot~
   Instead of a step by step process, which is what ~plot~ does,
   ~ggplot2~ creates graphics in a different way: the plots are stored
   as objects and remain static until you change the object. ~qplot~
   visualizes the printed object at any given time.

   To show this, store ~plot(foo,bar)~ and ~qplot(foo,bar)~ in two
   vectors ~baz~ and ~qux~ and print them:

   #+begin_src R :results output graphics :file ./img/qplot3.png
     ## load ggplot2 package
     library("ggplot2")

     ## define coordinate vectors
     foo <- c(1.1,2,3.5,3.9,4.2)
     bar <- c(2,2.2,-1.3,0,0.2)

     ## store and print plot
     baz <- plot(foo,bar)
     baz

     ## store and print qplot
     qux <- qplot(foo,bar)
     qux
   #+end_src

   ~baz~ is ~NULL~ because nothing is stored in the workspace. ~qux~
   on the other hand contains the ~qplot~ object. To be able to save
   the plot this way before you display it offers new ways of
   modifying and enhancing plots creating a distinct advantage over
   base R graphics.
* COMPONENTS OF A GRAPH
  We will construct the graph already shown earlier, in figure
  [[fig:gun]]. First, we break the graph apart in components:
  * *Data:* the US ~murders~ data frame is summarized
  * *Geometry:* the plot is a scatterplot. Other possibilities:
    barplot, histogram, smooth density plots, boxplots.
  * *Aesthetic mapping:* visual clues, like mapping of observations to
    x- and y-axis, color, data labels, region legend, overall style
    (here borrowed from the magazine The Economist[fn:3]).
* OBJECTS AND PIPING
  We define a ~ggplot~ object using the ~murders~ data. You should get
  an overview of the data using ~str(murders)~ et an overview of the
  data using ~str(murders)~ and ~head(murders)~.

  #+begin_src R :results output graphics :file ./img/object.png
    ## load package and data frame
    library(ggplot2)
    library(dslabs)
    data(murders)

    ## define object associated with the data
    p <- ggplot(data = murders)
    class(p)

    ## render plot by printing the object
    print(p)
  #+end_src

  An alternative is to pipe the data in as the first argument using
  the ~dplyr~ operator ~%>%~[fn:7]:
  #+begin_src R :results output graphics :file ./img/object1.png
    ## load package and data frame
    library(dplyr)
    library(ggplot2)
    library(dslabs)
    data(murders)
    ## pipe the data in as the first argument
    murders %>% ggplot()
  #+end_src

  The output is the same in both cases (see figure [[fig:obj]]): since no
  geometry was defined, the output is a blank slate with a pure grey
  style background.

  #+caption: ~ggplot()~ without geometry
  #+name: fig:obj
  [[./img/object1.png]]
* GEOMETRIES
  ~ggplot2~ graphs are created using layers with the ~+~ symbol. The
  schematic looks like this:

  #+begin_example
  ggplot(data=DATA) +  LAYER 1 + LAYER 2 + ... + LAYER N
  #+end_example

  Usually, the first layer defines the geometry - for scatterplot,
  that's ~geom_point~[fn:4]

  #+begin_quote
  [[geom_point][Challenge:]] check out the help file for ~geom_point~. Which aesthetic
  mappings are possible, which are necessary?
  #+end_quote

* AESTHETIC MAPPINGS
  The ~aes~ function is used as the argument of a geometry function:
  note that you can call the vectors ~murder$population~ and
  ~murder$total~ without the accessor ~$~[fn:5]:
  #+begin_src R :results output graphics :file ./img/aes.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## plot total murders vs population
    ggplot(data=murders) +
      geom_point(
        aes(x = population/10^6,
            y = total))
  #+end_src

  For the output, see figure [[fig:aes]].
  #+caption: aesthetic mapping with ~x~ and ~y~ values only
  #+name: fig:aes
  [[./img/aes.png]]

* LAYERS
  We add labels to identify each point with its US state
  (~murders$abb~) using the ~geom_text~ geometry. To emphasize the
  layer concept, we stick to the object notation (instead of the
  piping), see figure [[fig:text]] for the output:

  #+begin_src R :results output graphics :file ./img/text.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object, x and y vectors
    p <- ggplot(data = murders)

    ## add text label layer to the scatterplot and render
    p + geom_point(
          aes(x = population/10^6,
              y = total)) +
      geom_text(aes(x = population/10^6,
                    y = total,
                    label=abb))
  #+end_src

  #+begin_quote
  [[label][Challenge:]] try calling ~label=abb~ outside of the ~aes~ function!
  #+end_quote

  #+caption: Labeling aesthetic mappings using ~label=abb~ inside ~aes~
  #+name: fig:text
  [[./img/text.png]]

* SIZE IS NOT A MAPPING
  We can change aesthetics like the size of the points using the
  ~size~ argument inside the geometry. ~size~ is not a mapping,
  because it does not use data from observations!
  #+begin_src R :results output graphics :file ./img/size.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object, x and y vectors
    p <- ggplot(data = murders)

    ## add text label layer to the scatterplot and render
    p + geom_point(
          aes(x = population/10^6,
              y = total),
          size = 3) +
      geom_text(
        aes(x = population/10^6,
            y = total,
            label=abb))
  #+end_src

  This leads to a resizing of the points as shown in figure [[fig:size]].

  #+caption: Resizing points using ~size~ inside ~geom_point~
  #+name: fig:size
  [[./img/size.png]]

* NUDGING IS NOT A MAPPING EITHER
  #+begin_src R :results output graphics :file ./img/nudge.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object, x and y vectors
    p <- ggplot(data = murders)

    ## add text label layer to the scatterplot and render
    p + geom_point(
          aes(x = population/10^6,
              y = total),
          size = 3) +
      geom_text(
        aes(x = population/10^6,
            y = total,
            label=abb),
        nudge_x = 1.5)
  #+end_src

  This leads to a nudging of the labels as shown in figure
  [[fig:nudge]].

  #+caption: Nudging the labels using ~nudge_x~ inside ~geom_text~
  #+name: fig:nudge
  [[./img/nudge.png]]

* GLOBAL AESTHETIC MAPPING
  We want to avoid having to define ~aes~ for each geometry. To do
  this, we need to let R know that added layers will default to our
  mapping. We redefine our plot object ~p~. By defining a mapping
  inside ~ggplot~, it now applies globally. We then test this right
  away with our ~size~ and ~nudge_x~ parameters (see figure
  [[fig:global]]):

  #+begin_src R :results output graphics :file ./img/global.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb))

    ## add text label layer to the scatterplot and render
    p + geom_point(size = 3) +
      geom_text(nudge_x = 1.5)
  #+end_src

  #+caption: Our plot after applying a global aesthetic mapping
  #+name: fig:global
  [[./img/global.png]]
* LOCAL OVERRIDE
  Local definitions override global definitions! Figure [[fig:local]]
  shows an example: the second call to ~geom_text~ does not use the
  ~murders~ data.

  #+begin_src R :results output graphics :file ./img/local.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb))

    ## add text label layer to the scatterplot and render
    p + geom_point(size = 3) +
      geom_text(x = 10,
                y = 800,
                label = "Hello there!")
  #+end_src

  #+caption: Overriding global aesthetic mapping with a local definition
  #+name: fig:local
  [[./img/local.png]]

* LOG SCALE I
  Log-scales are not the default. We add them with the
  ~scale_x_continuous~ function (see figure [[fig:local]]):

  #+begin_src R :results output graphics :file ./img/scale.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb))

    ## add text label layer to the scatterplot and render
    ## transform x and y vectors to log10 values
    p + geom_point(size = 3) +
      geom_text(nudge_x = 0.05) +
      scale_x_continuous(trans = "log10") +
      scale_y_continuous(trans = "log10")
  #+end_src

  We reduce the ~nudge_x~ factor to accomodate the log-scale.
  #+caption: Transforming ~x~ and ~y~ axes to ~log10~ scales
  #+name: fig:scale
  [[./img/scale.png]]
* LOG SCALE II
  Logarithmic transformations are so common that there is a
  specialized function for it:
  #+begin_src R :results output graphics :file ./img/scale1.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb))

    ## add text label layer to the scatterplot and render
    ## transform x and y vectors to log10 values
    p + geom_point(size = 3) +
      geom_text(nudge_x = 0.05) +
      scale_x_log10() +
      scale_y_log10()
  #+end_src

  The output is the same as before, see figure [[fig:scale1]].
  #+caption: Transforming axes to ~log10~ scales using ~scale_x_log10~
  #+name: fig:scale1
  [[./img/scale1.png]]

* LABELS AND TITLES
  The functions to change labels and add a title are shown in the next
  code chunk - the the output in [[fig:label]]:

  #+begin_src R :results output graphics :file ./img/label.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb))

    ## add text label layer to the scatterplot and render
    ## transform x and y vectors to log10 values
    ## add title and axis labels
    p + geom_point(size = 3) +
      geom_text(nudge_x = 0.05) +
      scale_x_log10() +
      scale_y_log10() +
      xlab("Population in millions (log scale)") +
      ylab("US Gun Murders in 2010") +
      ggtitle("US Gun Murders in 2010")
  #+end_src

  #+caption: Adding labels and a title
  #+name: fig:label
  [[./img/label.png]]

* COLOR I
  The ~geom_point~ function has a ~color~ argument. If we add it
  alongside ~size~, all points will appear in that color (figure
  [[fig:color]]). To demonstrate this, we redefine ~p~ by taking out the
  ~geom_point~ layer.

  #+begin_src R :results output graphics :file ./img/color.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb)) +
      geom_text(nudge_x = 0.05) +
      scale_x_log10() +
      scale_y_log10() +
      xlab("Population in millions (log scale)") +
      ylab("US Gun Murders in 2010") +
      ggtitle("US Gun Murders in 2010")

    ## changing color for all points
    p + geom_point(size = 3, color ="blue")
  #+end_src

  #+caption: Adding color (all points)
  #+name: fig:color
  [[./img/color.png]]
* COLOR II
  This is not what we want. Instead, we use ~aes~ inside ~geom_point~
  to define an aesthetic mapping (since the color corresponds to data)
  using the factor ~murders$region~ so that we get add a third
  dimenstion to the plot - see figure [[fig:color1]].
  #+begin_src R :results output graphics :file ./img/color1.png
    library(dslabs)
    library(ggplot2)
    data(murders)

    ## define ggplot object and aesthetic mapping
    p <- ggplot(data=murders,
                aes(population/10^6,
                    total,
                    label=abb)) +
      geom_text(nudge_x = 0.05) +
      scale_x_log10() +
      scale_y_log10() +
      xlab("Population in millions (log scale)") +
      ylab("US Gun Murders in 2010") +
      ggtitle("US Gun Murders in 2010")

    ## changing color for all points
    p + geom_point(aes(col = region),
                   size = 3)
  #+end_src

  The coordinate point mappings are inherited. ~aes~ is expected to be
  the first argument of ~geom_point~. The legend showing the mapping
  of color to region is added automatically[fn:6].
  #+caption: Adding color as aesthetic mapping using ~murders$region~
  #+name: fig:color1
  [[./img/color1.png]]

* MORE
  There is a lot more you can do here. E.g. to add a line like with
  the Base-R function ~abline~, you can add a layer
  ~geom_abline()~. To compute the intercept and slope, we use the
  ~dplyr~ functions ~summarize~ and ~pull~ - the line in the final
  plot represents the average murder rate for the whole country.

  To make changes to the legend, you can use the
  ~scale_color_discrete~ geometry.

  For a "quick" overview (never quick, because there are so many
  functions in the package), you can check the [[https://rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf][~ggplot2~ cheat sheet]]
  from RStudio.

  You can change the overall theme with the package [[https://mran.microsoft.com/snapshot/2016-12-03/web/packages/ggthemes/vignettes/ggthemes.html][~ggthemes~]],
  e.g. to change the style to The Economist magazine style:
  #+begin_example
  library(ggthemes)
  p + theme_economist()
  #+end_example

  An alternative geometry to nudging the labels is ~geom_text_repel~,
  part of the [[https://www.rdocumentation.org/packages/ggrepel/versions/0.9.1][~ggrepel~ package]].

  In the next section, we use all of these to make the final plot.

* PUTTING IT ALL TOGETHER[fn:8]
  #+begin_src R :results output graphics :file ./img/final.png
    ## load data libraries
    library(dslabs)
    data(murders)

    ## load plotting libraries
    library(ggplot2)   # improved plotting
    library(ggthemes)  # improved plot theme
    library(ggrepel)   # improved text labels

    ggplot(data=murders,
           aes(population/10^6,
               total,
               label = abb)) +
      geom_point(aes(col=region),
                 size = 3) +
      geom_text_repel() +
      scale_x_log10() +
      scale_y_log10() +
      xlab("Population in millions (log scale)") +
      ylab("Total number of murders (log scale)") +
      ggtitle("US Gun Murders in 2010") +
      scale_color_discrete(name = "Region") +
      theme_economist()
  #+end_src

  #+caption: The final plot!
  #+name: fig:final
  [[./img/final.png]]

* CHALLENGES
  1) <<geom_point>> The first few aesthetic mappings that ~geom_point~
     understands, are ~x~, ~y~, and ~color~, with ~x~, ~y~ as the
     minimum.
  2) <<label>> Calling ~label=abb~ outside of the ~aes~ function leads
     to an error: ~abb~ is not recognized outside of ~aes~ - you have
     to index it as ~murders$abb~, then it would work:
     #+begin_src R :results output graphics :file ./img/index.png
       library(dslabs)
       library(ggplot2)
       data(murders)

       ## define ggplot object, x and y vectors
       p <- ggplot(data = murders)

       ## add text label layer to the scatterplot and render
       p + geom_point(aes(x = population/10^6, y = total)) +
         geom_text(aes(x = population/10^6, y = total), label=murders$abb)
     #+end_src
     This code leads to the output shown in figure [[fig:index]], which is
     identical to figure [[fig:text]].

  #+caption: Labeling aesthetic mappings using ~label=murders$abb~ outside of ~aes~
  #+name: fig:index
  [[./img/index.png]]

* REFERENCES
  * <<davies>> Davies (2016). Book of R chapter 7. NoStarch Press.
  * <<grolemund>> Grolemund/Wickham (2016). R for Data
    Science. O'Reilly. [[https://r4ds.had.co.nz/][Online: had.co.nz]]
  * <<irizarry>> Irizarry (2020). [[https://rafalab.github.io/dsbook/introduction-to-data-visualization.html][Introduction to Data Science]]
    Chapter 7: ggplot2. CRC Press. Online: [[https://rafalab.github.io/dsbook/ggplot2.html][rafalab.github.io]]
  * <<kumar>> Kumar (2020). Grid and Lattice Packages in R
    Programming. [[https://www.geeksforgeeks.org/grid-and-lattice-packages-in-r-programming/][Online: geeksforgeeks.org]]
  * <<matloff>> Matloff (2020). TidyverseSkeptic. [[https://github.com/matloff/TidyverseSkeptic][Online: github.com]]
  * <<wickham>> Wickham (2014). Tidy data. Journal of Statistical
    Software 59(10). [[https://vita.had.co.nz/papers/tidy-data.pdf][Online: had.co.nz]] (preprint), ~tidyr~
    [[https://tidyr.tidyverse.org/articles/tidy-data.html][vignette]]
* SUMMARY
  * Real data are mostly not "tidy" but "messy"
  * Components of a graph: data + aesthetic mapping  + geometry
  * Geometries: the type of plot (scatterplot, barplot etc.)
  * Graphs are created by adding layers to a ~ggplot()~ object
  * Arguments like size etc. are not part of the ~aes~ mapping
  * There are many add-on packages to refine plots
* CODE
  | ~install.packages("ggplot2")~ | install ~ggplot2~ package                   |
  | ~library(ggplot2)~            | load ~ggplot2~ package into R session       |
  | ~qplot(foo,bar)~              | quick scatterplot of ~foo~ vs. ~bar~        |
  | ~dslabs~                      | Package for Irizarry's DS course and book   |
  | ~dplyr~                       | Tidyverse package to manipulate data frames |
  | ~data.table~                  | Package to manipulate Big Tables            |
  | ~geom_point()~                | Scatterplot geometry                        |
  | ~ggplot()~                    | Geometry of Graphics plot object            |
  | ~aes(x,y,color,label)~        | Aesthetic mapping function                  |
  | ~data %>%~                    | Pipe ~data~ as argument into a function     |
  | ~geom_text()~                 | Add text labels                             |
  | ~scale_x_log10~               | Log transform the x axis                    |
  | ~geom_abline()~               | Adds a line                                 |
  | ~scale_color_discrete()~      | Change legend details                       |
  | ~theme_economics()~           | The Economics theme from ~ggthemes~         |
  | ~geom_text_repel()~           | Alternative text label repelling geometry   |
* Footnotes

[fn:8] The only aspect of the original plot that we ignore here is the
faint dashed line that represents the averate murder rate across the
US. If you're interested in seeing how this came about using the
~dplyr~ package, which I have ignored here, check [[https://rafalab.github.io/dsbook/ggplot2.html#putting-it-all-together][Irizarry (2020),
ch. 7.12]] .

[fn:7] Requires installation of ~dplyr~ and/or the Tidyverse through
~install.packages("tidyverse")~. This will take a while.

[fn:6] To switch it off, you can add the argument ~show.legend=FALSE~
to ~geom_point~.

[fn:5] This is specific to ~aes~, for most functions, this trick will
not work. So you should not forget indexing operators!

[fn:4] The usual syntax is ~geom_X~ where ~X~ denotes the geometry,
e.g. ~geom_point~, ~geom_bar~, ~geom_histogram~ etc.

[fn:3] See "[[http://www.dbenson.co.uk/Rparts/subpages/economist/][Creating a plot like the Economist in R]]" for a detailed
discussion of recreating this style using R's ~ggplot2~ and
~ggthemes~.

[fn:2] I don't really know why but the whole "tidy" use of language
ticks me off - though I don't particularly like things messy. Norman
Matloff has a few interesting points to make on that in his essay
"[[https://github.com/matloff/TidyverseSkeptic][TidyverseSceptic]] - an alternative view of the Tidyverse 'dialect# of
the R language, and its promotion by RStudio" ([[matloff][Matloff, 2020]]).

[fn:1] The main source for this lecture is Rafael Irizarry's
introductory data science course and book ([[irizarry][Irizarry, 2019]]). As a sad
pandemic update on the 2010 US gun murder figures used here: "Murder
rates jumped more than 30 percent fall-over-fall and more than 40
percent summer-over-summer from 2019 to 2020." (Source: [[https://quillette.com/2021/01/27/did-the-blm-protests-against-the-police-lead-to-the-2020-spike-in-homicides/][Quillette]]).
